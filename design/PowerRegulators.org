#+TITLE: PowerRegulators

* Main power regulator
This regulator is designed to handle up to 60V power input.

#+BEGIN_SRC octave :results output
% TPS54360 design

vout = 12;
vin = 60;
iout = 3.5;
rls = 10e3;
rdc = 36.8e-3;
vstart = 17;
vstop = 14;
lo = 33e-6;
dcj = 380e-12;
voripple = 0.005;
cout = 100e-6;
resr = 25e-3;
ioh = 2.625;
iol = 0.875;
fsw_chosen = 1500e3;
cin = 4.4e-6;
vf = 0.81;
rt_chosen = 137e3;

rdson = 92e-3;
dmax = 0.9;
i1 = 1.2e-6;
ihys = 3.4e-6;
vena = 1.2;
fdiv = 8;
voutsc = 0.1;
ton = 135e-9;
icl = 4.7;
kind = 0.3;
diout = 1.75;
dvout = 0.02;
vpeak = dvout + vout;
vi = vout;
gmps = 12;
gmea = 350e-6;
vref = 0.8;

% equation 1
vin_min = (vout + vf + rdc + iout)/0.99 + rdson * iout - vf;
% equation 2
vout_max = dmax * (vin_min - iout * rdson + vf) - vf + iout * rdc;
% equation 3
rhs = rls * (vout - vref)/vref;
% equation 4
ruvloh = (vstart - vstop)/ihys;
% equation 5
ruvlol = vena / ((vstart - vena)/ruvloh + i1);
% equation 7
rt_fsw_chosen = 1000 * 101756 / ((fsw_chosen / 1000) ^ 1.008);
rt = rt_chosen;
% equation 8
fsw = 1000 * 92417 / ((rt / 1000) ^ 0.991);
% equation 6
tss = 1024 / fsw;
% equation 9
fsw_max_skip = (1/ton) * ((iout * rdc + vout + vf)/(vin - iout * rdson + vf));
% equation 10
fsw_shift = (fdiv / ton) * ((icl * rdc + voutsc + vf)/(vin - icl * rdson + vf));
% equation 11
lo_min = ((vin - vout)/(iout * kind)) * (vout / (vin * fsw));
iripple = (vout * (vin - vout))/(vin * lo * fsw);
il_rms = sqrt(iout ^ 2 + 1/12 * ((vout * (vin - vout)) / (vin * lo * fsw))^2);
il_peak = iout + iripple / 2;
cout_min_1 = (2 * diout)/(fsw * dvout);
cout_min_2 = lo * (ioh ^ 2 - iol ^ 2)/(vpeak ^ 2 - vi ^ 2);
cout_min_3 = (1 / (fdiv * fsw)) * 1 / ((vout * voripple) / iripple);
cout_min = min([cout_min_1, cout_min_2, cout_min_3]);
resr_max = (vout * voripple) / iripple;
icout = (vout * (vin - vout))/(sqrt(12) * vin * lo * fsw);
pd = ((vin - vout) * iout * vf) / vin + (dcj * fsw * (vin + vf)^2)/2;
icirms = iout * sqrt((vout / vin_min) * (vin_min - vout)/vin_min);
dvin = (iout * 0.25)/(cin * fsw);

% equation 13
fp = iout / (2 * pi * vout * cout);
% equation 14
fz = 1 / (2 * pi * resr * cout);
fco_1 = sqrt(fp * fz);
fco_2 = sqrt(fp * fsw / 2);
fco = min(fco_1, fco_2);

r4 = ((2 * pi * fco * cout)/gmps) * (vout / (vref * gmea));
c5 = 1 / (2 * pi * r4 * fp);
c8_1 = (cout * resr) / r4;
c8_2 = 1 / (r4 * fsw * pi);
c8 = max(c8_1, c8_2);

printf('Rt for frequency %.2f: %.2f\n', fsw_chosen, rt_fsw_chosen);
printf('Switching frequency: %.2f\n', fsw);
printf('Rcomp: %f.2k, Ccomp: %fnf, Ccomp2: %f.2pf\n', r4 / 1e3, c5 / 1e-9, c8 / 1e-12)
printf('Rt: %.2fk\n', rt / 1e3)
printf('Cout_min: %.2fuf\n', cout_min / 1e-6)
printf('Rhs: %.2fk, Rls: %.2fk\n', rhs / 1e3, rls / 1e3)
printf('Ruvloh: %.2fk, Ruvlol: %.2fk\n', ruvloh / 1e3, ruvlol / 1e3)

#+END_SRC

#+RESULTS:
: Rt for frequency 1500000.00: 63982.33
: Switching frequency: 705117.97
: Rcomp: 12.198751.2k, Ccomp: 28.105922nf, Ccomp2: 204.939015.2pf
: Rt: 137.00k
: Cout_min: 1.22uf
: Rhs: 140.00k, Rls: 10.00k
: Ruvloh: 882.35k, Ruvlol: 62.81k
